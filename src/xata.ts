// Generated by Xata Codegen 0.28.3. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "purchases",
    columns: [
      { name: "title", type: "string", notNull: true, defaultValue: "item" },
      { name: "category", type: "string", notNull: true, defaultValue: "null" },
      { name: "purchaseDate", type: "datetime" },
      { name: "userId", type: "string", notNull: true, defaultValue: "null" },
      { name: "amount", type: "float", notNull: true, defaultValue: "0" },
    ],
  },
  {
    name: "purchase_categories",
    columns: [
      {
        name: "categoryName",
        type: "string",
        notNull: true,
        defaultValue: "null",
      },
      { name: "userId", type: "string", notNull: true, defaultValue: "null" },
      { name: "moneyMovement", type: "string", defaultValue: "Out" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Purchases = InferredTypes["purchases"];
export type PurchasesRecord = Purchases & XataRecord;

export type PurchaseCategories = InferredTypes["purchase_categories"];
export type PurchaseCategoriesRecord = PurchaseCategories & XataRecord;

export type DatabaseSchema = {
  purchases: PurchasesRecord;
  purchase_categories: PurchaseCategoriesRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://questerstudios-a1r24m.eu-west-1.xata.sh/db/everypurchase",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
